// Generated by CoffeeScript 1.6.3
var SIPClient, app, beamMeUp, config, cp, db, express, fs, headers, io, mongo, onInvite, registerMessage, registerTimeout, server, sip, sipClient, sipRegister, uri, util,
  _this = this;

express = require('express');

app = express();

server = require('http').createServer(app);

io = require('socket.io').listen(server);

SIPClient = require('sip-client');

util = require('util');

fs = require('fs');

cp = require('child_process');

mongo = require('mongodb').MongoClient;

registerTimeout = null;

config = JSON.parse(fs.readFileSync('config.json'));

server.listen(8137);

app.use(express["static"]('public'));

sip = true;

sipClient = new SIPClient(config.sip);

db = null;

io.set('log level', 1);

mongo.connect('mongodb://localhost:27017/scotty', function(err, dbo) {
  if (err) {
    throw err;
  }
  util.log('Mongo connected');
  return db = dbo;
});

beamMeUp = function(cb) {
  console.log('beaming');
  cp.exec('./puerta.rb', function(err, so, se) {
    console.log(err, so, se);
    return cb && cb();
  });
  return true;
};

app.get('/', function(req, res) {
  return res.sendfile('index.html');
});

app.get('/auth/:passcode', function(req, res) {
  var where;
  where = {
    passcode: req.params.passcode
  };
  console.log(where);
  return db.collection('codes').findOne(where, function(err, token) {
    if (token) {
      res.send({
        token: token.token
      });
    } else {
      res.send(404, {
        error: 'No encontr√© ese passcode :/'
      });
    }
    return true;
  });
});

io.on('connection', function(socket) {
  socket.emit('message', {
    status: 'connected'
  });
  socket.on('auth', function(data) {
    return db.collection('codes').findOne({
      token: data.token
    }, function(err, token) {
      console.log(err, token);
      if (token) {
        data = {
          expires: token.expires
        };
        if (token.admin) {
          data.admin = true;
        }
        return socket.set('authorized', true, function() {
          return socket.emit('authorized', data);
        });
      } else {
        return socket.emit('unauthorized', {
          error: 'unauthorized'
        });
      }
    });
  });
  return socket.on('beam', function() {
    return socket.get('authorized', function(err, okay) {
      if (err) {
        return socket.emit('unauthorized', {
          error: 'unauthorized'
        });
      } else {
        return beamMeUp(function() {
          return socket.emit('beaming');
        });
      }
    });
  });
});

uri = {
  schema: 'sip',
  host: config.sip.host,
  user: config.sip.user
};

headers = {
  contact: "<sip:" + config.sip.host + ":5060>",
  from: {
    name: 'A SIP User',
    uri: uri
  },
  to: {
    name: 'A SIP User',
    uri: uri
  }
};

onInvite = function(msg) {
  var from;
  console.log('invite!');
  from = sipClient.sip.parseUri(msg.headers.from.uri).user;
  console.log(from);
  if (config.allowed.indexOf(from) > -1) {
    util.log('beaming');
    return beamMeUp();
  } else {
    return console.log(from);
  }
};

sipClient.on('invite', onInvite);

registerMessage = sipClient.message('register', uri, headers);

sipRegister = function() {
  return registerMessage.send().on('success', function(msg) {
    util.log('SIP Registered');
    return registerTimeout = setTimeout(sipRegister, 45 * 60 * 1000);
  });
};

if (sip) {
  sipRegister();
}
