// Generated by CoffeeScript 1.9.1
(function() {
  var SIPClient, app, beamMeUp, config, db, express, fs, headers, http, httpOpts, io, lastSeen, mongo, onInvite, path, registerMessage, registerTimeout, server, sip, sipClient, sipRegister, uri, util;

  express = require('express');

  app = express();

  server = require('http').createServer(app);

  io = require('socket.io').listen(server);

  SIPClient = require('sip-client');

  util = require('util');

  fs = require('fs');

  mongo = require('mongodb').MongoClient;

  registerTimeout = null;

  path = require('path');

  http = require('http');

  config = JSON.parse(fs.readFileSync(path.resolve(__dirname, 'config.json')));

  server.listen(8137);

  app.use(express["static"]('public'));

  sip = false;

  db = null;

  lastSeen = null;

  io.set('log level', 1);

  mongo.connect('mongodb://localhost:27017/scotty', function(err, dbo) {
    if (err) {
      throw err;
    }
    util.log('Mongo connected');
    return db = dbo;
  });

  httpOpts = {
    hostname: '10.0.1.13',
    port: 80,
    path: '/',
    method: 'GET'
  };

  beamMeUp = function(cb) {
    var req;
    console.log('beaming');
    req = http.request(httpOpts);
    req.on('response', function(res) {
      console.log('responded');
      cb && cb(false);
      return lastSeen = new Date();
    });
    req.on('error', function(res) {
      console.log('err', res);
      return cb && cb(true);
    });
    req.end();
    return true;
  };

  app.get('/ping', function(req, res) {
    lastSeen = new Date();
    return res.send('Welcome, tessel');
  });

  app.get('/', function(req, res) {
    return res.sendfile('index.html');
  });

  app.get('/auth/:passcode', function(req, res) {
    var where;
    where = {
      passcode: req.params.passcode
    };
    return db.collection('codes').findOne(where, function(err, token) {
      if (token) {
        res.send({
          token: token.token
        });
      } else {
        res.send(404, {
          error: 'No encontr√© ese passcode :/'
        });
      }
      return true;
    });
  });

  io.on('connection', function(socket) {
    socket.emit('message', {
      status: 'connected'
    });
    socket.on('auth', function(data) {
      return db.collection('codes').findOne({
        token: data.token
      }, function(err, token) {
        if (token) {
          data = {
            token: token.token,
            expires: token.expires || false,
            lastSeen: lastSeen
          };
          if (token.admin) {
            data.admin = true;
          }
          return socket.set('authorized', true, function() {
            return socket.emit('authorized', data);
          });
        } else {
          return socket.emit('unauthorized', {
            error: 'unauthorized'
          });
        }
      });
    });
    return socket.on('beam', function() {
      return socket.get('authorized', function(err, okay) {
        if (err) {
          return socket.emit('unauthorized', {
            error: 'unauthorized'
          });
        } else {
          return beamMeUp(function(err) {
            if (err) {
              return socket.emit('error', {
                lastSeen: lastSeen
              });
            } else {
              return socket.emit('beaming');
            }
          });
        }
      });
    });
  });

  if (sip) {
    sipClient = new SIPClient(config.sip);
    uri = {
      schema: 'sip',
      host: config.sip.host,
      user: config.sip.user
    };
    headers = {
      contact: "<sip:" + config.sip.host + ":5060>",
      from: {
        name: 'A SIP User',
        uri: uri,
        params: {
          tag: 'scotty'
        }
      },
      to: {
        name: 'A SIP User',
        uri: uri
      }
    };
    onInvite = (function(_this) {
      return function(msg) {
        var from;
        console.log('invite!');
        from = sipClient.sip.parseUri(msg.headers.from.uri).user;
        console.log(from);
        if (config.allowed.indexOf(from) > -1) {
          util.log('beaming');
          return beamMeUp();
        } else {
          return console.log(from);
        }
      };
    })(this);
    sipClient.on('invite', onInvite);
    registerMessage = sipClient.message('register', uri, headers);
    sipRegister = function() {
      return registerMessage.send().on('success', function(msg) {
        util.log('SIP Registered');
        return registerTimeout = setTimeout(sipRegister, 45 * 60 * 1000);
      });
    };
    sipRegister();
  }

}).call(this);
